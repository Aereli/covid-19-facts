{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from \"react\";\n\nvar useStats = function useStats(url) {\n  var _useState = useState(),\n      stats = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    console.log(\"mounting or fetching\");\n\n    function fetchData() {\n      var data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"fetching data\");\n              setLoading(true);\n              setError();\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (res) {\n                return res.json();\n              })[\"catch\"](function (err) {\n                return setError(err);\n              }));\n\n            case 5:\n              data = _context.sent;\n              setStats(data);\n              setLoading(false);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n  }, [url]);\n  return {\n    stats: stats,\n    loading: loading,\n    error: error\n  };\n};\n\nexport default useStats;","map":null,"metadata":{},"sourceType":"module"}